#pragma once

#include <initguid.h>

#define  MAX_PULT	128
#define  MAX_LINE	32

//Пределы изменения питания пульта
#define  MIN_V12	10
#define  MIN_V24	20


//Пределы изменения температуры
#define  MAX_TEMPER		70



// Максимальный результат измерения сопротивления
#define  MAX_RES	4000
#define  MIN_RES	1000
#define  RES_1_LINE	1140
#define  RES_2_LINE	1290
#define  RES_3_LINE	1350

#define  TOTAL_RES	4095
// минимальный и максимальный результат измерения емкости
#define  MAX_CAP	4000 
#define  MIN_CAP	15
#define  LINE_PER_CAP	43.15
#define  ERROR_VALUE	5000 //Значение больше диапазона измерения 4095





#define MAX_SIZE_PRG     32768 //максимальный размер программы в байтах


#define MAX_DELAY_PRG	3000  //максимальная задержка выполнения в мс

//Задержка ожидания ответа на команду
#define DELAY_COMMAND	200

//Задержка ожидания приема команды СТАРТ
#define DELAY_START_COMMAND	10

//Интервал опроса фонового таймера
#define TIME_ECHO_MS	1000



//#define TEST

//Таймауты потоков для завершения
#define THREAD_WAIT_TIMEOUT	5000


/* Table of CRC values for high–order byte */
static BYTE auchCRCHi[] = {
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40
} ;



/* Table of CRC values for low–order byte */
static BYTE auchCRCLo[] = {
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
	0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
	0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
	0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
	0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
	0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
	0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
	0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
	0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
	0x40
};


static const GUID GuidInterfaceList[] =
{
	// USB Raw Device Interface Class GUID 
//	{ 0xa5dcbf10, 0x6530, 0x11d2, { 0x90, 0x1f, 0x00, 0xc0, 0x4f, 0xb9, 0x51, 0xed } },
	// Disk Device Interface Class GUID
//	{ 0x53f56307, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } },
	//Human Interface Device Class GUID
//	{ 0x4d1e55b2, 0xf16f, 0x11Cf, { 0x88, 0xcb, 0x00, 0x11, 0x11, 0x00, 0x00, 0x30 } },
	//LAN Interface Device Class GUID
//	{ 0xad498944, 0x762f, 0x11d0, { 0x8d, 0xcb, 0x00, 0xc0, 0x4f, 0xc3, 0x35, 0x8c } },
	// FTDI_D2XX_Device Class GUID 
	{ 0x219d0508, 0x57a8, 0x4ff5, {0x97, 0xa1, 0xbd, 0x86, 0x58, 0x7c, 0x6c, 0x7e   } },
	// FTDI_VCP_Device Class GUID 
	{0x86e0d1e0L, 0x8089, 0x11d0, {0x9c, 0xe4, 0x08, 0x00, 0x3e, 0x30, 0x1f, 0x73   } },
};

const COLORREF COLOR_WHITE  = RGB(255, 255, 255);
const COLORREF COLOR_BLACK  = RGB(0, 0, 0);
const COLORREF COLOR_DGREY  = RGB(128, 128, 128);
const COLORREF COLOR_GREY   = RGB(192, 192, 192);
const COLORREF COLOR_LLGREY = RGB(223, 223, 223);
const COLORREF COLOR_RED    = RGB(255, 0, 0);
const COLORREF COLOR_YELLOW  = RGB(255, 255, 0);
const COLORREF COLOR_GREEN  = RGB(0, 255, 0);
const COLORREF COLOR_BLUE   = RGB(0, 0, 255);

const COLORREF COLOR_BG_CAP    = RGB(190, 190, 190);
const COLORREF COLOR_BG_RES  = RGB(210, 210, 210);
const COLORREF COLOR_BG_COUNT_LINE   = RGB(230, 230, 230);




//Цвет текста и фона отмеченных кнопок
const COLORREF COLOR_CHECK_TXT  = RGB(64,64,64);
const COLORREF COLOR_CHECK_BGR  = RGB(192,192,192);

//Цвет текста и фона кнопок моторов
const COLORREF COLOR_MOTOR_TXT  = RGB(0,0,0);
const COLORREF COLOR_MOTOR_BGR  = RGB(235,134,134);

const COLORREF COLOR_MOTOR_NUM  = RGB(212, 157, 55);




// Команды записи в пульт
//Определение режимов работы пульта
#define REG_PAUSE			1  // Режим ПАУЗА в автономном режиме, транзистор открыт RIT остановлен
#define REG_RUN				2  // Выполнение программы в автономном режиме
#define REG_STEP			4  // Пошаговый режим в автономном режиме
#define REG_END				8  // Окончание программы
#define REG_WORK			16 // Подано питание на шину
#define REG_AVTO			32 // Автономный режим, реакция на старт, стоп, дострел, транзистор открыт
#define REG_TEST			64 // Тестовый режим работы, основной коммутатор закрыт




#define FOR_ALL				255 //Команда всем пультам

//Определение команд для управления пультом
#define CMD_ECHO			1 //эхо (проверка связи)

#define CMD_GET_NUM			2 //считать номер пульта
#define CMD_SET_NUM			3 //установить номер пульта
#define CMD_GET_SERIAL		4 //считать зав. номер пульта

#define CMD_SET_LINE		5 //установить линию  (ручной пуск)
#define CMD_GET_LINE		6 //считать состояние линии  (подключена/отключена)

#define CMD_GET_REG			7 //установить регистр
#define CMD_SET_REG			8 //записать в ячейку время и состояние линии

#define CMD_GET_TIME		9 //считать время
#define CMD_SET_TIME		10 //установить время

#define CMD_SET_MODE		11 //установить режим работы
#define CMD_GET_MODE		12 //считать режим работы

#define CMD_GET_RIT			13 //считать значение RIT
#define CMD_GET_POWER		14 //считать состояние аккум. пульта

#define CMD_START_PRG		15 //старт передачи для записи во флеш
#define CMD_STOP_PRG		16 //стоп передачи для записи во флеш

#define CMD_SET_AUTO		17 //Установить автономный режим (по подчи команды ПУСК)
//программа работает в автономном режиме
#define CMD_PUSK			18 //Команда ПУСК в автономном режиме
#define CMD_STOP			19 //Команда СТОП в автономном режиме

#define CMD_GET_TEMPER		20 //Получить температуру
#define CMD_CHECK			21 //Проверить запись в пульте с программой

#define CMD_SET_HANDLE_LINE 22 //Посылка команды на запуск без ожидания ответа
#define CMD_SET_GROUP_LINE  23 //включить одновременно несколько выходов

#define CMD_MOTOR_ON		24 //Включить мотор
#define CMD_MOTOR_OFF		25 //Выключить мотор

#define CMD_START_TXT		26 //Старт записи примечания к программе
#define CMD_SEND_TXT		27 //Запись примечания к программе
#define CMD_END_TXT			28 //Стоп записи примечания к программе

#define CMD_GET_PULSE		29 //Получить длительность импульса
#define CMD_SET_PULSE		30 //Установить длительность импульса



#define CMD_SET_AVTONOM		31 //Установить автономный режим при управлении кнопками

#define CMD_RESET     		32 //Сбросить счетчик времени, перейти в тестовый режим, силовую шину отключить
#define CMD_SET_TEST     	33 //

#define CMD_REDRAW_ENABLE 	34 //Разрешить перерисовку при длительных операциях
#define CMD_REDRAW_DISABLE 	35 //Запретить перерисовку при длительных операциях

#define CMD_BEGIN           36 //Возврат в начало, сброс счетчиков отстрела и текущей линии




//TEST
#define CMD_ON_CAP_RELAY    37 //Включить реле измерения емкости
#define CMD_OFF_CAP_RELAY 	38 //Выключить реле измерения емкости

#define CMD_ON_RES_RELAY    39 //Включить реле измерения сопротивления
#define CMD_OFF_RES_RELAY 	40 //Выключить реле измерения сопротивления
#define CMD_MEASURE 	    41 //Измерить значение емкости


#define CMD_ON_HI   		42 //Включить верхнее плечо
#define CMD_OFF_HI  		43 //Выключить верхнее плечо
#define CMD_ON_LO   		44 //Включить нижнее плечо
#define CMD_OFF_LO  		45 //Выключить нижнее плечо
#define CMD_GET_RES  		46 //Измерить сопротивление в линии


#define	CMD_CLEAR_LINE		47 //Сброс линий пульта


#define CMD_RIT_ON  	 			48 //
#define CMD_RIT_OFF					49 //
#define CMD_RIT_RESET	 			50 //




#define CMD_FIRST_TIME 		1 //Первая порция установки времени
#define CMD_SECOND_TIME		2 //Вторая порция установки времени





//KeyCode

#define VK_KEY_1        0x31
#define VK_KEY_2        0x32
#define VK_KEY_3        0x33
#define VK_KEY_4        0x34
#define VK_KEY_5        0x35
#define VK_KEY_6        0x36
#define VK_KEY_7        0x37
#define VK_KEY_8        0x38
#define VK_KEY_9        0x39
#define VK_KEY_0        0x30
#define VK_KEY_A        0x41
#define VK_KEY_B        0x42
#define VK_KEY_C        0x43
#define VK_KEY_D        0x44
#define VK_KEY_E        0x45
#define VK_KEY_F        0x46
#define VK_KEY_G        0x47
#define VK_KEY_H        0x48
#define VK_KEY_I        0x49
#define VK_KEY_J        0x4A
#define VK_KEY_K        0x4B
#define VK_KEY_L        0x4C
#define VK_KEY_M        0x4D
#define VK_KEY_N        0x4E
#define VK_KEY_O        0x4F
#define VK_KEY_P        0x50
#define VK_KEY_Q        0x51
#define VK_KEY_R        0x52
#define VK_KEY_S        0x53
#define VK_KEY_T        0x54
#define VK_KEY_U        0x55
#define VK_KEY_V        0x56
#define VK_KEY_W        0x57
#define VK_KEY_X        0x58
#define VK_KEY_Y        0x59
#define VK_KEY_Z        0x5A
#define VK_OEM_1        0xBA
#define VK_OEM_COMMA    0xBC
#define VK_OEM_PERIOD   0xBE
#define VK_OEM_2        0xBF



